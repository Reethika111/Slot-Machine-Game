{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOYQB1skZUG1GEYvLzNoMD3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Reethika111/SlotMachineGame/blob/main/slot_machine_game.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4h0TFMAuIvMj",
        "outputId": "482230d1-a110-4d6e-e714-ddace8355e66"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Current balance is $100\n",
            "You do not have enough to bet that amount, your current balance is: $100\n",
            "You are betting $20 on 2 lines. Total bet is equal to: $40\n",
            "D | D | D\n",
            "D | D | B\n",
            "D | D | D\n",
            "You won $40.\n",
            "You won on lines: 1\n",
            "Current balance is $100\n"
          ]
        }
      ],
      "source": [
        "\n",
        "import random\n",
        "\n",
        "# Constants for the slot machine game\n",
        "MAX_LINES = 3  # Maximum number of lines a player can bet on\n",
        "MAX_BET = 100  # Maximum bet amount\n",
        "MIN_BET = 1    # Minimum bet amount\n",
        "ROWS = 3       # Number of rows in the slot machine\n",
        "COLS = 3       # Number of columns in the slot machine\n",
        "\n",
        "# Symbol counts and values\n",
        "symbol_count = {\n",
        "    \"A\": 2,  # Symbol \"A\" appears twice in the reel\n",
        "    \"B\": 4,  # Symbol \"B\" appears four times\n",
        "    \"C\": 6,  # Symbol \"C\" appears six times\n",
        "    \"D\": 8   # Symbol \"D\" appears eight times\n",
        "}\n",
        "\n",
        "symbol_value = {\n",
        "    \"A\": 5,  # \"A\" has the highest value\n",
        "    \"B\": 4,  # \"B\" has the second-highest value\n",
        "    \"C\": 3,  # \"C\" has the third-highest value\n",
        "    \"D\": 2   # \"D\" has the lowest value\n",
        "}\n",
        "\n",
        "# Function to check for winnings based on the bet and lines\n",
        "def check_winnings(columns, lines, bet, values):\n",
        "    winnings = 0  # Initialize winnings to 0\n",
        "    winning_lines = []  # List to store the winning lines\n",
        "    for line in range(lines):  # Loop through each line bet on\n",
        "        symbol = columns[0][line]  # Check the first symbol in the line\n",
        "        for column in columns:\n",
        "            symbol_to_check = column[line]  # Check the symbol in the current column\n",
        "            if symbol != symbol_to_check:\n",
        "                break  # Stop checking if symbols don't match\n",
        "        else:\n",
        "            winnings += values[symbol] * bet  # Add winnings if all symbols match\n",
        "            winning_lines.append(line + 1)  # Record the winning line\n",
        "    return winnings, winning_lines\n",
        "\n",
        "# Function to simulate a spin of the slot machine\n",
        "def get_slot_machine_spin(rows, cols, symbols):\n",
        "    all_symbols = []\n",
        "    for symbol, symbol_count in symbols.items():\n",
        "        for _ in range(symbol_count):\n",
        "            all_symbols.append(symbol)  # Add symbols to a list based on their count\n",
        "\n",
        "    columns = []  # List to store the columns of the slot machine\n",
        "    for _ in range(cols):\n",
        "        column = []\n",
        "        current_symbols = all_symbols[:]\n",
        "        for _ in range(rows):\n",
        "            value = random.choice(current_symbols)  # Randomly select a symbol\n",
        "            current_symbols.remove(value)  # Remove the selected symbol\n",
        "            column.append(value)\n",
        "        columns.append(column)  # Add the column to the slot machine\n",
        "    return columns\n",
        "\n",
        "# Function to print the slot machine layout\n",
        "def print_slot_machine(columns):\n",
        "    for row in range(len(columns[0])):\n",
        "        for i, column in enumerate(columns):\n",
        "            if i != len(columns) - 1:\n",
        "                print(column[row], end=\" | \")  # Print symbols in each row\n",
        "            else:\n",
        "                print(column[row], end=\"\")\n",
        "        print()\n",
        "\n",
        "# Function to deposit money into the game\n",
        "def deposit():\n",
        "    while True:\n",
        "        amount = input(\"What would you like to deposit? $\")\n",
        "        if amount.isdigit():  # Check if the input is a valid number\n",
        "            amount = int(amount)\n",
        "            if amount > 0:  # Ensure the amount is greater than 0\n",
        "                break\n",
        "            else:\n",
        "                print(\"Amount must be greater than 0.\")\n",
        "        else:\n",
        "            print(\"Please enter a number.\")\n",
        "    return amount\n",
        "\n",
        "# Function to get the number of lines to bet on\n",
        "def get_number_of_lines():\n",
        "    while True:\n",
        "        lines = input(\"Enter the number of lines to bet on (1-\" + str(MAX_LINES) + \"): \")\n",
        "        if lines.isdigit():  # Check if the input is a valid number\n",
        "            lines = int(lines)\n",
        "            if 1 <= lines <= MAX_LINES:  # Ensure the number of lines is valid\n",
        "                break\n",
        "            else:\n",
        "                print(\"Enter a valid number of lines.\")\n",
        "        else:\n",
        "            print(\"Please enter a number.\")\n",
        "    return lines\n",
        "\n",
        "# Function to get the bet amount per line\n",
        "def get_bet():\n",
        "    while True:\n",
        "        amount = input(\"What would you like to bet on each line? $\")\n",
        "        if amount.isdigit():  # Check if the input is a valid number\n",
        "            amount = int(amount)\n",
        "            if MIN_BET <= amount <= MAX_BET:  # Ensure the bet amount is within the allowed range\n",
        "                break\n",
        "            else:\n",
        "                print(f\"Amount must be between ${MIN_BET} - ${MAX_BET}.\")\n",
        "        else:\n",
        "            print(\"Please enter a number.\")\n",
        "    return amount\n",
        "\n",
        "# Function to handle the spinning process and calculate the result\n",
        "def spin(balance):\n",
        "    lines = get_number_of_lines()  # Get the number of lines to bet on\n",
        "    while True:\n",
        "        bet = get_bet()  # Get the bet amount per line\n",
        "        total_bet = bet * lines  # Calculate the total bet amount\n",
        "        if total_bet > balance:\n",
        "            print(f\"You do not have enough to bet that amount, your current balance is: ${balance}\")\n",
        "        else:\n",
        "            break\n",
        "    print(f\"You are betting ${bet} on {lines} lines. Total bet is equal to: ${total_bet}\")\n",
        "    slots = get_slot_machine_spin(ROWS, COLS, symbol_count)  # Spin the slot machine\n",
        "    print_slot_machine(slots)  # Print the slot machine layout\n",
        "    winnings, winning_lines = check_winnings(slots, lines, bet, symbol_value)  # Check for winnings\n",
        "    print(f\"You won ${winnings}.\")\n",
        "    print(f\"You won on lines:\", *winning_lines)\n",
        "    return winnings - total_bet\n",
        "\n",
        "# Main function to start the game\n",
        "def main():\n",
        "    balance = deposit()  # Get the initial deposit\n",
        "    while True:\n",
        "        print(f\"Current balance is ${balance}\")\n",
        "        answer = input(\"Press enter to play (q to quit).\")\n",
        "        if answer == \"q\":\n",
        "            break\n",
        "        balance += spin(balance)  # Spin the slot machine and update the balance\n",
        "    print(f\"You left with ${balance}\")\n",
        "\n",
        "# Start the game\n",
        "main()\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6XlxEHVzJR3j"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}